// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: mst.proto

package rpc

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type MSTChild struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	High  []byte `protobuf:"bytes,3,opt,name=high,proto3" json:"high,omitempty"`
}

func (x *MSTChild) Reset() {
	*x = MSTChild{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mst_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSTChild) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSTChild) ProtoMessage() {}

func (x *MSTChild) ProtoReflect() protoreflect.Message {
	mi := &file_mst_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSTChild.ProtoReflect.Descriptor instead.
func (*MSTChild) Descriptor() ([]byte, []int) {
	return file_mst_proto_rawDescGZIP(), []int{0}
}

func (x *MSTChild) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *MSTChild) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *MSTChild) GetHigh() []byte {
	if x != nil {
		return x.High
	}
	return nil
}

type MSTNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level    uint32      `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
	Low      []byte      `protobuf:"bytes,2,opt,name=low,proto3" json:"low,omitempty"`
	Children []*MSTChild `protobuf:"bytes,3,rep,name=children,proto3" json:"children,omitempty"`
}

func (x *MSTNode) Reset() {
	*x = MSTNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mst_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSTNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSTNode) ProtoMessage() {}

func (x *MSTNode) ProtoReflect() protoreflect.Message {
	mi := &file_mst_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSTNode.ProtoReflect.Descriptor instead.
func (*MSTNode) Descriptor() ([]byte, []int) {
	return file_mst_proto_rawDescGZIP(), []int{1}
}

func (x *MSTNode) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *MSTNode) GetLow() []byte {
	if x != nil {
		return x.Low
	}
	return nil
}

func (x *MSTNode) GetChildren() []*MSTChild {
	if x != nil {
		return x.Children
	}
	return nil
}

type MSTPutRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   uint32 `protobuf:"varint,1,opt,name=key,proto3" json:"key,omitempty"`
	Value uint32 `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *MSTPutRequest) Reset() {
	*x = MSTPutRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mst_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSTPutRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSTPutRequest) ProtoMessage() {}

func (x *MSTPutRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mst_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSTPutRequest.ProtoReflect.Descriptor instead.
func (*MSTPutRequest) Descriptor() ([]byte, []int) {
	return file_mst_proto_rawDescGZIP(), []int{2}
}

func (x *MSTPutRequest) GetKey() uint32 {
	if x != nil {
		return x.Key
	}
	return 0
}

func (x *MSTPutRequest) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type MSTGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key uint32 `protobuf:"varint,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *MSTGetRequest) Reset() {
	*x = MSTGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mst_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSTGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSTGetRequest) ProtoMessage() {}

func (x *MSTGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mst_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSTGetRequest.ProtoReflect.Descriptor instead.
func (*MSTGetRequest) Descriptor() ([]byte, []int) {
	return file_mst_proto_rawDescGZIP(), []int{3}
}

func (x *MSTGetRequest) GetKey() uint32 {
	if x != nil {
		return x.Key
	}
	return 0
}

type MSTGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value uint32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *MSTGetResponse) Reset() {
	*x = MSTGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mst_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSTGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSTGetResponse) ProtoMessage() {}

func (x *MSTGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mst_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSTGetResponse.ProtoReflect.Descriptor instead.
func (*MSTGetResponse) Descriptor() ([]byte, []int) {
	return file_mst_proto_rawDescGZIP(), []int{4}
}

func (x *MSTGetResponse) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type MSTRoundStartRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoundUuid []byte `protobuf:"bytes,1,opt,name=round_uuid,json=roundUuid,proto3" json:"round_uuid,omitempty"`
	RootHash  []byte `protobuf:"bytes,2,opt,name=root_hash,json=rootHash,proto3" json:"root_hash,omitempty"`
}

func (x *MSTRoundStartRequest) Reset() {
	*x = MSTRoundStartRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mst_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSTRoundStartRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSTRoundStartRequest) ProtoMessage() {}

func (x *MSTRoundStartRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mst_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSTRoundStartRequest.ProtoReflect.Descriptor instead.
func (*MSTRoundStartRequest) Descriptor() ([]byte, []int) {
	return file_mst_proto_rawDescGZIP(), []int{5}
}

func (x *MSTRoundStartRequest) GetRoundUuid() []byte {
	if x != nil {
		return x.RoundUuid
	}
	return nil
}

func (x *MSTRoundStartRequest) GetRootHash() []byte {
	if x != nil {
		return x.RootHash
	}
	return nil
}

type MSTRoundStepRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoundUuid []byte     `protobuf:"bytes,1,opt,name=round_uuid,json=roundUuid,proto3" json:"round_uuid,omitempty"`
	Nodes     []*MSTNode `protobuf:"bytes,2,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (x *MSTRoundStepRequest) Reset() {
	*x = MSTRoundStepRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mst_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSTRoundStepRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSTRoundStepRequest) ProtoMessage() {}

func (x *MSTRoundStepRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mst_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSTRoundStepRequest.ProtoReflect.Descriptor instead.
func (*MSTRoundStepRequest) Descriptor() ([]byte, []int) {
	return file_mst_proto_rawDescGZIP(), []int{6}
}

func (x *MSTRoundStepRequest) GetRoundUuid() []byte {
	if x != nil {
		return x.RoundUuid
	}
	return nil
}

func (x *MSTRoundStepRequest) GetNodes() []*MSTNode {
	if x != nil {
		return x.Nodes
	}
	return nil
}

type MSTRoundStepResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hashes [][]byte `protobuf:"bytes,1,rep,name=hashes,proto3" json:"hashes,omitempty"`
}

func (x *MSTRoundStepResponse) Reset() {
	*x = MSTRoundStepResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mst_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSTRoundStepResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSTRoundStepResponse) ProtoMessage() {}

func (x *MSTRoundStepResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mst_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSTRoundStepResponse.ProtoReflect.Descriptor instead.
func (*MSTRoundStepResponse) Descriptor() ([]byte, []int) {
	return file_mst_proto_rawDescGZIP(), []int{7}
}

func (x *MSTRoundStepResponse) GetHashes() [][]byte {
	if x != nil {
		return x.Hashes
	}
	return nil
}

var File_mst_proto protoreflect.FileDescriptor

var file_mst_proto_rawDesc = []byte{
	0x0a, 0x09, 0x6d, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x76, 0x75, 0x6c,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x70, 0x63,
	0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x46, 0x0a,
	0x08, 0x4d, 0x53, 0x54, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x69, 0x67, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x68, 0x69, 0x67, 0x68, 0x22, 0x6c, 0x0a, 0x07, 0x4d, 0x53, 0x54, 0x4e, 0x6f, 0x64, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x77, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x03, 0x6c, 0x6f, 0x77, 0x12, 0x39, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c,
	0x64, 0x72, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x76, 0x75, 0x6c,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x4d, 0x53, 0x54, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64,
	0x72, 0x65, 0x6e, 0x22, 0x37, 0x0a, 0x0d, 0x4d, 0x53, 0x54, 0x50, 0x75, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x21, 0x0a, 0x0d,
	0x4d, 0x53, 0x54, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22,
	0x26, 0x0a, 0x0e, 0x4d, 0x53, 0x54, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x52, 0x0a, 0x14, 0x4d, 0x53, 0x54, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x09, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x74, 0x48, 0x61, 0x73, 0x68, 0x22, 0x68, 0x0a, 0x13, 0x4d,
	0x53, 0x54, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x65, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x55, 0x75, 0x69,
	0x64, 0x12, 0x32, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x76, 0x75, 0x6c, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x53, 0x54, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05,
	0x6e, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x2e, 0x0a, 0x14, 0x4d, 0x53, 0x54, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x53, 0x74, 0x65, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x68, 0x61, 0x73, 0x68, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x06, 0x68,
	0x61, 0x73, 0x68, 0x65, 0x73, 0x32, 0xa3, 0x01, 0x0a, 0x0a, 0x4d, 0x53, 0x54, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x43, 0x0a, 0x03, 0x50, 0x75, 0x74, 0x12, 0x22, 0x2e, 0x76, 0x75,
	0x6c, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x4d, 0x53, 0x54, 0x50, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x03, 0x47, 0x65, 0x74,
	0x12, 0x22, 0x2e, 0x76, 0x75, 0x6c, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x53, 0x54, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x76, 0x75, 0x6c, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x53, 0x54, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0xdd, 0x01, 0x0a, 0x11,
	0x4d, 0x53, 0x54, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x64, 0x0a, 0x0a, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12,
	0x29, 0x2e, 0x76, 0x75, 0x6c, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x53, 0x54, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x76, 0x75, 0x6c,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x4d, 0x53, 0x54, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x65, 0x70, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x09, 0x52, 0x6f, 0x75, 0x6e, 0x64,
	0x53, 0x74, 0x65, 0x70, 0x12, 0x28, 0x2e, 0x76, 0x75, 0x6c, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x53, 0x54, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x53, 0x74, 0x65, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29,
	0x2e, 0x76, 0x75, 0x6c, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x53, 0x54, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x65,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x2a, 0x5a, 0x28, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x76, 0x75, 0x6c, 0x74, 0x75, 0x72,
	0x65, 0x64, 0x62, 0x2f, 0x76, 0x75, 0x6c, 0x74, 0x75, 0x72, 0x65, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2f, 0x72, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mst_proto_rawDescOnce sync.Once
	file_mst_proto_rawDescData = file_mst_proto_rawDesc
)

func file_mst_proto_rawDescGZIP() []byte {
	file_mst_proto_rawDescOnce.Do(func() {
		file_mst_proto_rawDescData = protoimpl.X.CompressGZIP(file_mst_proto_rawDescData)
	})
	return file_mst_proto_rawDescData
}

var file_mst_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_mst_proto_goTypes = []interface{}{
	(*MSTChild)(nil),             // 0: vulture.service.rpc.MSTChild
	(*MSTNode)(nil),              // 1: vulture.service.rpc.MSTNode
	(*MSTPutRequest)(nil),        // 2: vulture.service.rpc.MSTPutRequest
	(*MSTGetRequest)(nil),        // 3: vulture.service.rpc.MSTGetRequest
	(*MSTGetResponse)(nil),       // 4: vulture.service.rpc.MSTGetResponse
	(*MSTRoundStartRequest)(nil), // 5: vulture.service.rpc.MSTRoundStartRequest
	(*MSTRoundStepRequest)(nil),  // 6: vulture.service.rpc.MSTRoundStepRequest
	(*MSTRoundStepResponse)(nil), // 7: vulture.service.rpc.MSTRoundStepResponse
	(*empty.Empty)(nil),          // 8: google.protobuf.Empty
}
var file_mst_proto_depIdxs = []int32{
	0, // 0: vulture.service.rpc.MSTNode.children:type_name -> vulture.service.rpc.MSTChild
	1, // 1: vulture.service.rpc.MSTRoundStepRequest.nodes:type_name -> vulture.service.rpc.MSTNode
	2, // 2: vulture.service.rpc.MSTService.Put:input_type -> vulture.service.rpc.MSTPutRequest
	3, // 3: vulture.service.rpc.MSTService.Get:input_type -> vulture.service.rpc.MSTGetRequest
	5, // 4: vulture.service.rpc.MSTManagerService.RoundStart:input_type -> vulture.service.rpc.MSTRoundStartRequest
	6, // 5: vulture.service.rpc.MSTManagerService.RoundStep:input_type -> vulture.service.rpc.MSTRoundStepRequest
	8, // 6: vulture.service.rpc.MSTService.Put:output_type -> google.protobuf.Empty
	4, // 7: vulture.service.rpc.MSTService.Get:output_type -> vulture.service.rpc.MSTGetResponse
	7, // 8: vulture.service.rpc.MSTManagerService.RoundStart:output_type -> vulture.service.rpc.MSTRoundStepResponse
	7, // 9: vulture.service.rpc.MSTManagerService.RoundStep:output_type -> vulture.service.rpc.MSTRoundStepResponse
	6, // [6:10] is the sub-list for method output_type
	2, // [2:6] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_mst_proto_init() }
func file_mst_proto_init() {
	if File_mst_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mst_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSTChild); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mst_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSTNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mst_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSTPutRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mst_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSTGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mst_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSTGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mst_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSTRoundStartRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mst_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSTRoundStepRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mst_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSTRoundStepResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mst_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_mst_proto_goTypes,
		DependencyIndexes: file_mst_proto_depIdxs,
		MessageInfos:      file_mst_proto_msgTypes,
	}.Build()
	File_mst_proto = out.File
	file_mst_proto_rawDesc = nil
	file_mst_proto_goTypes = nil
	file_mst_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MSTServiceClient is the client API for MSTService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MSTServiceClient interface {
	Put(ctx context.Context, in *MSTPutRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Get(ctx context.Context, in *MSTGetRequest, opts ...grpc.CallOption) (*MSTGetResponse, error)
}

type mSTServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMSTServiceClient(cc grpc.ClientConnInterface) MSTServiceClient {
	return &mSTServiceClient{cc}
}

func (c *mSTServiceClient) Put(ctx context.Context, in *MSTPutRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/vulture.service.rpc.MSTService/Put", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mSTServiceClient) Get(ctx context.Context, in *MSTGetRequest, opts ...grpc.CallOption) (*MSTGetResponse, error) {
	out := new(MSTGetResponse)
	err := c.cc.Invoke(ctx, "/vulture.service.rpc.MSTService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MSTServiceServer is the server API for MSTService service.
type MSTServiceServer interface {
	Put(context.Context, *MSTPutRequest) (*empty.Empty, error)
	Get(context.Context, *MSTGetRequest) (*MSTGetResponse, error)
}

// UnimplementedMSTServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMSTServiceServer struct {
}

func (*UnimplementedMSTServiceServer) Put(context.Context, *MSTPutRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Put not implemented")
}
func (*UnimplementedMSTServiceServer) Get(context.Context, *MSTGetRequest) (*MSTGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}

func RegisterMSTServiceServer(s *grpc.Server, srv MSTServiceServer) {
	s.RegisterService(&_MSTService_serviceDesc, srv)
}

func _MSTService_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MSTPutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MSTServiceServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vulture.service.rpc.MSTService/Put",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MSTServiceServer).Put(ctx, req.(*MSTPutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MSTService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MSTGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MSTServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vulture.service.rpc.MSTService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MSTServiceServer).Get(ctx, req.(*MSTGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MSTService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "vulture.service.rpc.MSTService",
	HandlerType: (*MSTServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Put",
			Handler:    _MSTService_Put_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _MSTService_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mst.proto",
}

// MSTManagerServiceClient is the client API for MSTManagerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MSTManagerServiceClient interface {
	RoundStart(ctx context.Context, in *MSTRoundStartRequest, opts ...grpc.CallOption) (*MSTRoundStepResponse, error)
	RoundStep(ctx context.Context, in *MSTRoundStepRequest, opts ...grpc.CallOption) (*MSTRoundStepResponse, error)
}

type mSTManagerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMSTManagerServiceClient(cc grpc.ClientConnInterface) MSTManagerServiceClient {
	return &mSTManagerServiceClient{cc}
}

func (c *mSTManagerServiceClient) RoundStart(ctx context.Context, in *MSTRoundStartRequest, opts ...grpc.CallOption) (*MSTRoundStepResponse, error) {
	out := new(MSTRoundStepResponse)
	err := c.cc.Invoke(ctx, "/vulture.service.rpc.MSTManagerService/RoundStart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mSTManagerServiceClient) RoundStep(ctx context.Context, in *MSTRoundStepRequest, opts ...grpc.CallOption) (*MSTRoundStepResponse, error) {
	out := new(MSTRoundStepResponse)
	err := c.cc.Invoke(ctx, "/vulture.service.rpc.MSTManagerService/RoundStep", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MSTManagerServiceServer is the server API for MSTManagerService service.
type MSTManagerServiceServer interface {
	RoundStart(context.Context, *MSTRoundStartRequest) (*MSTRoundStepResponse, error)
	RoundStep(context.Context, *MSTRoundStepRequest) (*MSTRoundStepResponse, error)
}

// UnimplementedMSTManagerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMSTManagerServiceServer struct {
}

func (*UnimplementedMSTManagerServiceServer) RoundStart(context.Context, *MSTRoundStartRequest) (*MSTRoundStepResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoundStart not implemented")
}
func (*UnimplementedMSTManagerServiceServer) RoundStep(context.Context, *MSTRoundStepRequest) (*MSTRoundStepResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoundStep not implemented")
}

func RegisterMSTManagerServiceServer(s *grpc.Server, srv MSTManagerServiceServer) {
	s.RegisterService(&_MSTManagerService_serviceDesc, srv)
}

func _MSTManagerService_RoundStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MSTRoundStartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MSTManagerServiceServer).RoundStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vulture.service.rpc.MSTManagerService/RoundStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MSTManagerServiceServer).RoundStart(ctx, req.(*MSTRoundStartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MSTManagerService_RoundStep_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MSTRoundStepRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MSTManagerServiceServer).RoundStep(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vulture.service.rpc.MSTManagerService/RoundStep",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MSTManagerServiceServer).RoundStep(ctx, req.(*MSTRoundStepRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MSTManagerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "vulture.service.rpc.MSTManagerService",
	HandlerType: (*MSTManagerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RoundStart",
			Handler:    _MSTManagerService_RoundStart_Handler,
		},
		{
			MethodName: "RoundStep",
			Handler:    _MSTManagerService_RoundStep_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mst.proto",
}
